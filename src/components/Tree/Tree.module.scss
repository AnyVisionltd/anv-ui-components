@import '~@anyvision/style-guide';

$searchInputHeight: av-size(sz-40);
$bulkExpandSelectHeight: av-size(sz-32);

$parentNodeWrapperHeight: av-size(sz-80);
$parentNodeHeight: calc(#{$parentNodeWrapperHeight} - #{av-space(tiny)});

$nodeBackground: av-color(purewhite, av-opacity(ghost));
$nodeBackgroundHover: av-color(purewhite, av-opacity(divider));

%hiddenTextOverflow {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  word-wrap: break-word;
}

%borderBottomImage {
  background-image: linear-gradient(
    90deg,
    av-color(purewhite, av-opacity(divider)) 0%,
    av-color(purewhite, av-opacity(disabled)) 20%,
    av-color(purewhite, av-opacity(divider)) 80%
  );
  background-position: 50% 100%, 100% 100%;
  background-repeat: no-repeat;
  background-size: 90% 1px, 100% 100%;
}

.tree {
  width: av-size(sz-480);
  height: 100%;
  background-color: av-color(blue-light);
  padding: av-space(medium);

  .checkbox {
    min-width: av-size(sz-32);
    span {
      border: solid 2px av-color(purewhite, av-opacity(medium));
    }
  }

  .searchInput {
    width: 100%;
    height: $searchInputHeight;
    margin-bottom: av-space();
    border: solid 1px av-color(purewhite, av-opacity(divider));
    transition: all 0.3s ease-in-out;

    &:focus-within {
      border-color: av-color(primary, av-opacity(medium));
    }

    input {
      width: 100%;
      height: 100%;
      caret-color: av-color(purewhite, av-opacity(divider));
      padding: av-space(tiny);
      color: av-color(purewhite, av-opacity(medium));

      &::placeholder {
        @extend %av-body2;
        color: av-color(purewhite, av-opacity(medium));
      }
    }

    .searchIcon {
      fill: av-color(purewhite, av-opacity(divider));
      font-size: av-font-size(large);
    }
  }

  .bulkActions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: av-space(tiny) 0;
    height: $bulkExpandSelectHeight;

    .bulkSelectContainer {
      display: flex;
      align-items: center;
      padding: av-space(micro) 0;

      .bulkSelectCheckbox {
        span {
          border: solid 2px av-color(purewhite, av-opacity(disabled));
        }
      }

      .bulkSelectLabel {
        @extend %av-body2;
        color: av-color(purewhite);
      }
    }

    .bulkExpand {
      @extend %av-body2;
      color: av-color(primary);
      padding: av-space(micro);
      cursor: pointer;

      &:hover {
        background: av-color(primary, av-opacity(divider));
      }
    }
  }

  .nodesContainer {
    display: flex;
    flex: 1;
    flex-direction: column;
    // Reduce the height of the other 2 elements for auto-sizer-react-window and considering paddingBottom
    max-height: calc(
      100% - #{$searchInputHeight} - #{$bulkExpandSelectHeight} - #{av-space()}
    );
    min-height: av-size(sz-320);
    height: 100%;

    .parentNodeContainer {
      height: $parentNodeHeight;
      position: relative;
      display: flex;
      flex-direction: column-reverse;

      &.rootNodeContainer {
        height: $parentNodeWrapperHeight;
      }

      &:hover {
        > div[class*='actionsCell'] {
          opacity: 1;
          z-index: av-z-index(popup);
        }
      }
    }

    .parentNodeWrapper {
      background-color: $nodeBackground;

      &.rootNodeWrapper {
        border-radius: av-radius(tidy);

        &.isNotExpanded {
          &:hover {
            background-color: $nodeBackgroundHover;
          }
        }
      }
    }

    .parentNode {
      height: $parentNodeHeight;
      align-items: center;
      display: grid;
      justify-content: center;
      grid-template-rows: auto auto;
      grid-template-columns: auto 1fr;
      transition: all 0.3s ease-in-out;
      background-color: inherit;
      padding-right: av-space();

      .isSelectedCheckbox {
        grid-column: 1 / 2;
        grid-row: 1 / 2;
      }

      .parentLabel {
        grid-column: 2 / -1;
        grid-row: 1 / 2;
        @extend %av-subtitle2;
        @extend %hiddenTextOverflow;
        color: av-color(purewhite);
        line-height: av-size(sz-24);
        margin: 0;
      }

      .parentNodeContent {
        grid-column: 2 / -1;
        grid-row: 2 / -1;
        margin-left: calc(-1 * #{av-space(tiny)});
        display: flex;
        flex-direction: column;
        padding: 0;

        .parentNodeInfo {
          display: flex;
          justify-content: flex-start;
          align-items: center;
          height: av-size(sz-32);

          .parentInfoText {
            @extend %av-body2;
            color: av-color(purewhite, av-opacity(medium));
            line-height: av-size(sz-16);
          }
        }
      }
    }

    .leafNodeContainer {
      background-color: $nodeBackground;
      height: av-size(sz-48);
      width: 100%;

      &.lastLeafNodeContainer {
        border-bottom-left-radius: av-radius(tidy);
        border-bottom-right-radius: av-radius(tidy);
      }
    }

    .leafNodeWrapper {
      background-color: inherit;
      height: 100%;
    }

    .leafNode {
      display: flex;
      align-items: center;
      justify-content: space-between;
      height: 100%;
      transition: all 0.3s ease-in-out;
      gap: av-space(tiny);
      padding-right: av-space();
      @extend %borderBottomImage;

      &.lastLeafNode {
        background-image: none;
      }

      .leftSideLeaf {
        display: flex;
        align-items: center;
        @extend %hiddenTextOverflow;

        .leafLabel {
          @extend %av-body2;
          color: av-color(purewhite);
        }
      }

      &:nth-child(2) {
        flex: 1;
      }
    }
  }
}
