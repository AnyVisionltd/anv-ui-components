@import '~@anyvision/style-guide';

.ChipsInput {
  position: relative;
  display: flex;
  flex-direction: column;

  .container {
    @extend %av-scrollbar;
    border-radius: av-radius(tidy);
    box-sizing: border-box;
    border: solid 1px av-color(content, av-opacity(divider));
    overflow-y: auto;
    overflow-wrap: anywhere;
    min-height: 48px;
    max-height: 168px;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    flex-grow: 1;

    > svg {
      margin-left: av-space(tiny);
      width: av-size(sz-24);
      height: av-size(sz-24);

      + .inputBase {
        padding: 0 av-space(tiny);
      }
    }

    &:hover:not(:focus-within):not(.error):not(.disabled) {
      box-shadow: inset 0 0 0 2px av-color(content, av-opacity(disabled));
      border: solid 1px transparent;
    }

    &:focus-within {
      box-shadow: inset 0 0 0 2px av-color(primary);
      border: solid 1px transparent;
    }

    &.error,
    &.error:focus-within {
      box-shadow: inset 0 0 0 2px av-color(error);
      border: solid 1px transparent;
    }

    .chipStyle {
      margin: av-space(micro) 0 av-space(micro) av-space(tiny);

      &.chipError {
        color: av-color(error);
        background-color: av-color(error, av-opacity(divider));

        &:focus {
          background-color: av-color(error, av-opacity(disabled));
        }
      }
    }

    .inputBase {
      padding: 0 av-space();
      border: none;
      flex-grow: 1;

      > input {
        @extend %av-body1;
      }
    }
  }

  .helperText {
    @extend %av-caption;
    text-align: left;
    color: av-color(content, av-opacity(medium));

    &.helperError {
      color: av-color(error);
    }
  }

  .cancelIcon {
    fill: av-color(content);
  }
}
